from django.test import TestCase
from django.urls import reverse, resolve
from ..views import home, board_topics, new_topic
from ..models import Board, Topic, Post
from django.contrib.auth.models import User
from ..forms import NewTopicForm
# Create your tests here.

class Hometests(TestCase):
    def setUp(self):
        self.board = Board.objects.create(name='Django', description= 'Django board.')
        url=reverse('home')#view名'home'で返されるURLを変数「url」に代入
        self.response=self.client.get(url)#変数「url」のurlにクライアントがアクセスしたときのレスポンスオブジェクトを変数「response」に代入

    def test_home_view_status_code(self):#「'home'」viewが正常なレスポンスを返すか検証
        self.assertEquals(self.response.status_code, 200)#変数responseのステータスコードが200であるか検証

    def test_home_url_resolves_home_view(self):#「’/’」リクエストが「home」view関数で解決するか検証
        view=resolve('/')#「'/'」でリクエストしたときに解決されるオブジェクトを変数「view」に代入
        self.assertEquals(view.func, home)#変数「view」のfuncが「home」であるか否かを検証

    def test_home_view_contains_link_to_topics_page(self):
        board_topics_url = reverse('board_topics', kwargs={'pk': self.board.pk})#boardインスタンスのpk値を付けた「board_topics」ビューで返されるURLを「boardtopics_url」に代入
        self.assertContains(self.response, 'href="{0}"'.format(board_topics_url))#homeのレスポンスに「board_topics_url」へのリンクがあるか否かを検証

class BoardTopicsTests(TestCase):
    def setUp(self):#セットアップメソッド：テストで使用するBoardインスタンスを作成
        Board.objects.create(name='Django', description='Django board.')

    def test_board_topics_view_success_status_code(self):#pK=1のBoardが存在するか否か
        url = reverse('board_topics', kwargs={'pk': 1})
        response = self.client.get(url)
        self.assertEquals(response.status_code, 200)

    def test_board_topics_view_not_found_status_code(self):#pk=99のBoardが存在しないか否か
        url = reverse('board_topics', kwargs={'pk': 99})
        response = self.client.get(url)
        self.assertEquals(response.status_code, 404)

    def test_board_topics_url_resolves_board_topics_view(self):#正しいビュー関数が使用されるのか
        view = resolve('/boards/1/')
        self.assertEquals(view.func, board_topics)

    def test_board_topics_view_contains_navigation_links(self):#board_Topicsページにナビゲーションリンクがあるのか
        board_topics_url = reverse('board_topics', kwargs={'pk': 1})#キーワードとしてpk=1のboard_topicsへのURLを作成
        response = self.client.get(board_topics_url)#pk=1のboard_topicsページのインスタンス
        homepage_url = reverse('home')#homeページへのURL
        new_topic_url = reverse('new_topic',kwargs={'pk': 1})#キーワードとしてpk=1のnew_topicへのURLを作成
        self.assertContains(response, 'href="{0}"'.format(homepage_url))#pk=1のboard_topicseページにhomeへのリンクが含まれているか否か
        self.assertContains(response, 'href="{0}"'.format(new_topic_url))#pk=1のboard_topicsページにnew_topicへのリンクが含まれているか否か

class NewTopicTests(TestCase):
    def setUp(self):#setUp：テスト中に使用されるBoardインスタンス,Userいんすたんすを作成
        Board.objects.create(name='Django', description='Django board.')
        User.objects.create_user(username='john' ,email='john@doe.com' ,password='123')

    def test_new_topic_view_success_status_code(self):#new_topicビューへのリクエストが成功したかどうか確認する
        url = reverse('new_topic', kwargs={'pk': 1})
        response = self.client.get(url)
        self.assertEquals(response.status_code, 200)

    def test_new_topic_view_not_found_status_code(self):#Boardが存在しないときにビューが404エラーを発生させているかどうか
        url = reverse('new_topic', kwargs={'pk': 99})
        response = self.client.get(url)
        self.assertEquals(response.status_code, 404)

    def test_new_topic_url_resolves_new_topic_view(self):#外部からのリクエストによって呼ばれるviewと内部の逆解決で呼ばれるview(new_topic)と一致しているか？
        view = resolve('/boards/1/new/')
        self.assertEquals(view.func, new_topic)

    def test_new_topic_view_contains_link_back_to_board_topics_view(self):#トピック一覧へのナビゲーション。トピック一覧へのリンクがあるか
        new_topic_url = reverse('new_topic', kwargs={'pk': 1})
        board_topics_url = reverse('board_topics', kwargs={'pk': 1})
        response = self.client.get(new_topic_url)
        self.assertContains(response, 'href="{0}"'.format(board_topics_url))

    def test_csrf(self):
        url = reverse('new_topic', kwargs={'pk': 1})
        response = self.client.get(url)
        self.assertContains(response, 'csrfmiddlewaretoken')

    def test_new_topic_valid_post_data(self):
        url = reverse('new_topic', kwargs={'pk': 1})
        data = {
            'subject': 'Test title',
            'message': 'Lorem ipsum dolor sit amet'
        }
        response = self.client.post(url, data)
        self.assertTrue(Topic.objects.exists())
        self.assertTrue(Post.objects.exists())

    def test_new_topic_invalid_post_data_empty_fields(self):
        '''
        Invalid post data should not redirect
        The expected behavior is to show the form again with validation errors
        '''
        url = reverse('new_topic', kwargs={'pk': 1})
        data = {
            'subject': '',
            'message': ''
        }
        response = self.client.post(url, data)
        self.assertEquals(response.status_code, 200)
        self.assertFalse(Topic.objects.exists())
        self.assertFalse(Post.objects.exists())

    def test_contains_form(self):  # <- new test
        url = reverse('new_topic', kwargs={'pk': 1})
        response = self.client.get(url)
        form = response.context.get('form')
        self.assertIsInstance(form, NewTopicForm)

    def test_new_topic_invalid_post_data(self):  # <- updated this one
        '''
        Invalid post data should not redirect
        The expected behavior is to show the form again with validation errors
        '''
        url = reverse('new_topic', kwargs={'pk': 1})
        response = self.client.post(url, {})
        form = response.context.get('form')
        self.assertEquals(response.status_code, 200)
        self.assertTrue(form.errors)
